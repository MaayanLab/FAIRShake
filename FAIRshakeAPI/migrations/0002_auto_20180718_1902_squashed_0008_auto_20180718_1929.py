# Generated by Django 2.0.7 on 2018-07-18 19:32

from django.conf import settings
from django.db import migrations, models
import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone

def forward_migration(apps, schema_editor):
    metric = apps.get_model('metric', 'Metric')
    for metric in Metric.objects.all():
        metric.principle = \
            'F' if metric.f != '' else '' + \
            'A' if metric.a != '' else '' + \
            'I' if metric.i != '' else '' + \
            'R' if metric.r != '' else ''

    Project = apps.get_model('project', 'Project')
    DigitalObject = apps.get_model('digitalobject', 'DigitalObject')
    DigitalObjectInProject = apps.get_model('digitalobjectinproject', 'DigitalObjectInProject')

    for obj in DigitalObject.objects.all():
        Project.get(id=obj.project_id).digital_objects.add(obj)
    
    for dip in DigitalObjectInProject.objects.all():
        dip.project.digital_objects.add(dip.digital_object)

    Assessment = apps.get_model('assessment', 'Assessment')
    Answer = apps.get_model('answer', 'Answer')

    for answer in Answer.objects.all():
        assessment = Assessment.get_or_create(
            user=answer.user_id,
            target=answer.resource_id,
            project=answer.project_id,
            rubric=0, # TODO
        )
        assessment.answers.add(
            Answer(
                assessment=assessment.id,
                metric=answer.q_id,
                answer=answer.answer,
                comment=answer.comment,
                url_comment=answer.url_comment,
            )
        )

class Migration(migrations.Migration):

    replaces = [('FAIRshakeAPI', '0002_auto_20180718_1902'), ('FAIRshakeAPI', '0003_auto_20180718_1904'), ('FAIRshakeAPI', '0004_auto_20180718_1912'), ('FAIRshakeAPI', '0005_auto_20180718_1924'), ('FAIRshakeAPI', '0006_auto_20180718_1925'), ('FAIRshakeAPI', '0007_auto_20180718_1927'), ('FAIRshakeAPI', '0008_auto_20180718_1929')]

    dependencies = [
        ('FAIRshakeAPI', '0001_initial'),
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.AlterModelOptions(
            name='average',
            options={},
        ),
        migrations.AlterModelOptions(
            name='evaluation',
            options={},
        ),
        migrations.AlterModelOptions(
            name='project',
            options={},
        ),
        migrations.AlterModelOptions(
            name='question',
            options={},
        ),
        migrations.AlterModelOptions(
            name='questioninrubric',
            options={},
        ),
        migrations.AlterModelOptions(
            name='questionold',
            options={},
        ),
        migrations.AlterModelOptions(
            name='resource',
            options={},
        ),
        migrations.AlterModelOptions(
            name='resourceinproject',
            options={},
        ),
        migrations.AlterModelOptions(
            name='rubric',
            options={},
        ),
        migrations.AlterModelOptions(
            name='rubrictoresource',
            options={},
        ),
        migrations.AlterModelOptions(
            name='user',
            options={},
        ),
        migrations.AddField(
            model_name='questioninrubric',
            name='q',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, to='FAIRshakeAPI.Question'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='questioninrubric',
            name='rubric',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, to='FAIRshakeAPI.Rubric'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='resourceinproject',
            name='project',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, to='FAIRshakeAPI.Project'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rubric',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='FAIRshakeAPI.User'),
        ),
        migrations.AddField(
            model_name='rubrictoresource',
            name='resource',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, to='FAIRshakeAPI.Resource'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rubrictoresource',
            name='rubric',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, to='FAIRshakeAPI.Rubric'),
            preserve_default=False,
        ),
        migrations.AlterUniqueTogether(
            name='resourceinproject',
            unique_together={('resource', 'project')},
        ),
        migrations.AlterModelTable(
            name='average',
            table=None,
        ),
        migrations.AlterModelTable(
            name='evaluation',
            table=None,
        ),
        migrations.AlterModelTable(
            name='project',
            table=None,
        ),
        migrations.AlterModelTable(
            name='question',
            table=None,
        ),
        migrations.AlterModelTable(
            name='questioninrubric',
            table=None,
        ),
        migrations.AlterModelTable(
            name='questionold',
            table=None,
        ),
        migrations.AlterModelTable(
            name='resource',
            table=None,
        ),
        migrations.AlterModelTable(
            name='resourceinproject',
            table=None,
        ),
        migrations.AlterModelTable(
            name='rubric',
            table=None,
        ),
        migrations.AlterModelTable(
            name='rubrictoresource',
            table=None,
        ),
        migrations.AlterModelTable(
            name='user',
            table=None,
        ),
        migrations.RenameModel(
            old_name='Evaluation',
            new_name='Answer',
        ),
        migrations.RenameModel(
            old_name='Question',
            new_name='Metric',
        ),
        migrations.AlterField(
            model_name='questioninrubric',
            name='q',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='FAIRshakeAPI.Metric'),
        ),
        migrations.RenameModel(
            old_name='ResourceInProject',
            new_name='DigitalObjectInProject',
        ),
        migrations.RenameModel(
            old_name='Resource',
            new_name='DigitalObject',
        ),
        migrations.AlterField(
            model_name='rubrictoresource',
            name='resource',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='FAIRshakeAPI.DigitalObject'),
        ),
        migrations.RenameField(
            model_name='digitalobjectinproject',
            old_name='resource',
            new_name='digital_object',
        ),
        migrations.RenameField(
            model_name='metric',
            old_name='q_id',
            new_name='id',
        ),
        migrations.RenameField(
            model_name='metric',
            old_name='content',
            new_name='title',
        ),
        migrations.RenameField(
            model_name='metric',
            old_name='res_type',
            new_name='type',
        ),
        migrations.AlterField(
            model_name='digitalobjectinproject',
            name='digital_object',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='FAIRshakeAPI.DigitalObject'),
        ),
        migrations.AlterUniqueTogether(
            name='digitalobjectinproject',
            unique_together={('digital_object', 'project')},
        ),
        migrations.RenameField(
            model_name='digitalobject',
            old_name='resource_id',
            new_name='id',
        ),
        migrations.RunPython(
            code=forward_migration,
        ),
        migrations.CreateModel(
            name='Assessment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('methodology', models.TextField()),
                ('requestor', models.TextField()),
                ('assessor', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('orcid', models.TextField(null=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.DeleteModel(
            name='Average',
        ),
        migrations.AlterUniqueTogether(
            name='digitalobjectinproject',
            unique_together=set(),
        ),
        migrations.RemoveField(
            model_name='digitalobjectinproject',
            name='digital_object',
        ),
        migrations.RemoveField(
            model_name='digitalobjectinproject',
            name='project',
        ),
        migrations.RemoveField(
            model_name='questioninrubric',
            name='q',
        ),
        migrations.RemoveField(
            model_name='questioninrubric',
            name='rubric',
        ),
        migrations.DeleteModel(
            name='QuestionOld',
        ),
        migrations.RemoveField(
            model_name='rubrictoresource',
            name='resource',
        ),
        migrations.RemoveField(
            model_name='rubrictoresource',
            name='rubric',
        ),
        migrations.CreateModel(
            name='Score',
            fields=[
            ],
            options={
                'proxy': True,
                'indexes': [],
            },
            bases=('FAIRshakeAPI.digitalobject',),
        ),
        migrations.RenameField(
            model_name='project',
            old_name='project_description',
            new_name='description',
        ),
        migrations.RenameField(
            model_name='project',
            old_name='project_id',
            new_name='id',
        ),
        migrations.RenameField(
            model_name='project',
            old_name='project_img',
            new_name='image',
        ),
        migrations.RenameField(
            model_name='rubric',
            old_name='rubric_id',
            new_name='id',
        ),
        migrations.RemoveField(
            model_name='answer',
            name='project_id',
        ),
        migrations.RemoveField(
            model_name='answer',
            name='q_id',
        ),
        migrations.RemoveField(
            model_name='answer',
            name='resource_id',
        ),
        migrations.RemoveField(
            model_name='answer',
            name='test',
        ),
        migrations.RemoveField(
            model_name='answer',
            name='user_id',
        ),
        migrations.RemoveField(
            model_name='digitalobject',
            name='project_id',
        ),
        migrations.RemoveField(
            model_name='digitalobject',
            name='resource_name',
        ),
        migrations.RemoveField(
            model_name='digitalobject',
            name='resource_type',
        ),
        migrations.RemoveField(
            model_name='digitalobject',
            name='test',
        ),
        migrations.RemoveField(
            model_name='metric',
            name='a',
        ),
        migrations.RemoveField(
            model_name='metric',
            name='f',
        ),
        migrations.RemoveField(
            model_name='metric',
            name='i',
        ),
        migrations.RemoveField(
            model_name='metric',
            name='num',
        ),
        migrations.RemoveField(
            model_name='metric',
            name='r',
        ),
        migrations.RemoveField(
            model_name='metric',
            name='test',
        ),
        migrations.RemoveField(
            model_name='metric',
            name='version',
        ),
        migrations.RemoveField(
            model_name='project',
            name='project_name',
        ),
        migrations.RemoveField(
            model_name='project',
            name='test',
        ),
        migrations.RemoveField(
            model_name='rubric',
            name='rubric_name',
        ),
        migrations.RemoveField(
            model_name='rubric',
            name='user',
        ),
        migrations.AddField(
            model_name='answer',
            name='metric',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, related_name='answers', to='FAIRshakeAPI.Metric'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='digitalobject',
            name='image',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='digitalobject',
            name='minid',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='digitalobject',
            name='rubrics',
            field=models.ManyToManyField(related_name='digital_objects', to='FAIRshakeAPI.Rubric'),
        ),
        migrations.AddField(
            model_name='digitalobject',
            name='tags',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='digitalobject',
            name='title',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='digitalobject',
            name='type',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='digitalobject',
            name='uri',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='metric',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='metric',
            name='fairmetrics',
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='metric',
            name='fairsharing',
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='metric',
            name='image',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='metric',
            name='license',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='metric',
            name='minid',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='metric',
            name='principle',
            field=models.URLField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='metric',
            name='rationale',
            field=models.URLField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='metric',
            name='tags',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='metric',
            name='uri',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='digital_objects',
            field=models.ManyToManyField(related_name='projects', to='FAIRshakeAPI.DigitalObject'),
        ),
        migrations.AddField(
            model_name='project',
            name='minid',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='tags',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='title',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='project',
            name='uri',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='project',
            name='url',
            field=models.URLField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='rubric',
            name='description',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='rubric',
            name='image',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='rubric',
            name='license',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rubric',
            name='metrics',
            field=models.ManyToManyField(related_name='rubrics', to='FAIRshakeAPI.Metric'),
        ),
        migrations.AddField(
            model_name='rubric',
            name='minid',
            field=models.TextField(null=True),
        ),
        migrations.AddField(
            model_name='rubric',
            name='tags',
            field=models.TextField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='rubric',
            name='title',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rubric',
            name='type',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='rubric',
            name='uri',
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name='answer',
            name='answer',
            field=models.TextField(blank=True, default=''),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='answer',
            name='id',
            field=models.AutoField(primary_key=True, serialize=False),
        ),
        migrations.AlterField(
            model_name='digitalobject',
            name='url',
            field=models.URLField(default=''),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='metric',
            name='title',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='metric',
            name='type',
            field=models.TextField(default=''),
            preserve_default=False,
        ),
        migrations.DeleteModel(
            name='DigitalObjectInProject',
        ),
        migrations.DeleteModel(
            name='QuestionInRubric',
        ),
        migrations.DeleteModel(
            name='RubricToResource',
        ),
        migrations.AddField(
            model_name='assessment',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='assessments', to='FAIRshakeAPI.Project'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='rubric',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='assessments', to='FAIRshakeAPI.Rubric'),
        ),
        migrations.AddField(
            model_name='assessment',
            name='target',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='assessments', to='FAIRshakeAPI.DigitalObject'),
        ),
        migrations.AddField(
            model_name='answer',
            name='assessment',
            field=models.ForeignKey(default=0, on_delete=django.db.models.deletion.DO_NOTHING, related_name='answers', to='FAIRshakeAPI.Assessment'),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name='digitalobject',
            name='authors',
            field=models.ManyToManyField(to='FAIRshakeAPI.Author'),
        ),
        migrations.AddField(
            model_name='metric',
            name='authors',
            field=models.ManyToManyField(to='FAIRshakeAPI.Author'),
        ),
        migrations.AddField(
            model_name='project',
            name='authors',
            field=models.ManyToManyField(to='FAIRshakeAPI.Author'),
        ),
        migrations.AddField(
            model_name='rubric',
            name='authors',
            field=models.ManyToManyField(to='FAIRshakeAPI.Author'),
        ),
        migrations.RenameModel(
            old_name='User',
            new_name='CustomUser',
        ),
        migrations.AlterModelOptions(
            name='customuser',
            options={'verbose_name': 'user', 'verbose_name_plural': 'users'},
        ),
        migrations.AlterModelManagers(
            name='customuser',
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='role_evaluator',
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='role_starter',
        ),
        migrations.RemoveField(
            model_name='customuser',
            name='test',
        ),
        migrations.RenameField(
            model_name='customuser',
            old_name='user_id',
            new_name='id',
        ),
        migrations.AddField(
            model_name='customuser',
            name='date_joined',
            field=models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='email',
            field=models.EmailField(blank=True, max_length=254, verbose_name='email address'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='is_active',
            field=models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='is_staff',
            field=models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='is_superuser',
            field=models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='last_login',
            field=models.DateTimeField(blank=True, null=True, verbose_name='last login'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterField(
            model_name='customuser',
            name='first_name',
            field=models.CharField(blank=True, default='', max_length=30, verbose_name='first name'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='customuser',
            name='last_name',
            field=models.CharField(blank=True, default='', max_length=150, verbose_name='last name'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='customuser',
            name='password',
            field=models.CharField(default='', max_length=128, verbose_name='password'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='customuser',
            name='username',
            field=models.CharField(default='', error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username'),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='customuser',
            name='id',
            field=models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
    ]
